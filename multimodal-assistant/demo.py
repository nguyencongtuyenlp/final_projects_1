#!/usr/bin/env python3
"""
üéÆ Interactive Demo Script for Multimodal AI Assistant

H∆∞·ªõng d·∫´n test c√°c t√≠nh nƒÉng c·ªßa h·ªá th·ªëng m·ªôt c√°ch interactive.
"""

import asyncio
import aiohttp
import json
import os
import tempfile
import wave
import struct
import numpy as np
from pathlib import Path
from PIL import Image, ImageDraw
import sys

BASE_URL = "http://localhost:8000"

class Colors:
    GREEN = '\033[92m'
    BLUE = '\033[94m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    PURPLE = '\033[95m'
    CYAN = '\033[96m'
    END = '\033[0m'
    BOLD = '\033[1m'

def print_header(text):
    print(f"\n{Colors.PURPLE}{'='*60}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.CYAN}{text.center(60)}{Colors.END}")
    print(f"{Colors.PURPLE}{'='*60}{Colors.END}\n")

def print_success(text):
    print(f"{Colors.GREEN}‚úÖ {text}{Colors.END}")

def print_error(text):
    print(f"{Colors.RED}‚ùå {text}{Colors.END}")

def print_info(text):
    print(f"{Colors.BLUE}‚ÑπÔ∏è  {text}{Colors.END}")

def print_warning(text):
    print(f"{Colors.YELLOW}‚ö†Ô∏è  {text}{Colors.END}")

async def check_server():
    """Ki·ªÉm tra server c√≥ ch·∫°y kh√¥ng"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{BASE_URL}/health") as response:
                if response.status == 200:
                    data = await response.json()
                    print_success(f"Server ƒëang ch·∫°y - Version: {data.get('version', 'unknown')}")
                    return True
                else:
                    print_error(f"Server tr·∫£ v·ªÅ status code: {response.status}")
                    return False
    except aiohttp.ClientConnectorError:
        print_error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server!")
        print_info("H√£y ch·∫°y: make serve ho·∫∑c docker-compose up")
        return False
    except Exception as e:
        print_error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
        return False

def create_sample_image():
    """T·∫°o ·∫£nh m·∫´u ƒë·ªÉ test OCR"""
    img = Image.new('RGB', (400, 200), color='white')
    draw = ImageDraw.Draw(img)
    
    # V·∫Ω text
    text = "Multimodal AI Assistant\nDemo Test Image\nOCR Testing 2024"
    draw.text((50, 50), text, fill='black')
    
    # V·∫Ω h√¨nh ch·ªØ nh·∫≠t
    draw.rectangle([300, 50, 350, 100], outline='blue', width=2)
    
    # L∆∞u file t·∫°m
    temp_path = tempfile.mktemp(suffix='.png')
    img.save(temp_path)
    return temp_path

def create_sample_audio():
    """T·∫°o file audio m·∫´u (sine wave)"""
    duration = 2.0  # 2 seconds
    sample_rate = 16000
    frequency = 440  # A4 note
    
    # Generate sine wave
    t = np.linspace(0, duration, int(sample_rate * duration), False)
    wave_data = np.sin(frequency * 2 * np.pi * t)
    
    # Convert to 16-bit integers
    wave_data = (wave_data * 32767).astype(np.int16)
    
    # Save to temp file
    temp_path = tempfile.mktemp(suffix='.wav')
    with wave.open(temp_path, 'wb') as wav_file:
        wav_file.setnchannels(1)  # mono
        wav_file.setsampwidth(2)  # 16-bit
        wav_file.setframerate(sample_rate)
        wav_file.writeframes(wave_data.tobytes())
    
    return temp_path

async def demo_health_check():
    """Demo health check endpoint"""
    print_header("üè• HEALTH CHECK DEMO")
    
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{BASE_URL}/health") as response:
            data = await response.json()
            print_info(f"GET {BASE_URL}/health")
            print(f"Response: {json.dumps(data, indent=2)}")
            print_success("Health check th√†nh c√¥ng!")

async def demo_multimodal_analysis():
    """Demo multimodal analysis"""
    print_header("ü§ñ MULTIMODAL ANALYSIS DEMO")
    
    # T·∫°o ·∫£nh m·∫´u
    print_info("T·∫°o ·∫£nh m·∫´u cho demo...")
    image_path = create_sample_image()
    
    try:
        async with aiohttp.ClientSession() as session:
            # Test OCR
            print_info("Testing OCR...")
            data = aiohttp.FormData()
            data.add_field('tasks', '["ocr"]')
            data.add_field('image', open(image_path, 'rb'), filename='demo.png')
            
            async with session.post(f"{BASE_URL}/v1/multimodal/analyze", data=data) as response:
                result = await response.json()
                print(f"OCR Result: {json.dumps(result, indent=2)}")
                
                if result.get('ok') and 'ocr' in result.get('result', {}):
                    print_success(f"OCR extracted: '{result['result']['ocr']}'")
                else:
                    print_warning("OCR kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c text")
            
            # Test Text Summarization
            print_info("\nTesting Text Summarization...")
            data = aiohttp.FormData()
            data.add_field('text', 'Artificial intelligence (AI) is intelligence demonstrated by machines, in contrast to the natural intelligence displayed by humans and animals. Leading AI textbooks define the field as the study of "intelligent agents": any device that perceives its environment and takes actions that maximize its chance of successfully achieving its goals.')
            data.add_field('tasks', '["summary"]')
            
            async with session.post(f"{BASE_URL}/v1/multimodal/analyze", data=data) as response:
                result = await response.json()
                print(f"Summary Result: {json.dumps(result, indent=2)}")
                
                if result.get('ok') and 'summary' in result.get('result', {}):
                    print_success(f"Summary: '{result['result']['summary']}'")
                else:
                    print_warning("Summarization kh√¥ng th√†nh c√¥ng")
                    
    finally:
        # Cleanup
        if os.path.exists(image_path):
            os.remove(image_path)

async def demo_rag():
    """Demo RAG functionality"""
    print_header("üìö RAG (RETRIEVAL-AUGMENTED GENERATION) DEMO")
    
    # Upload sample document
    print_info("Uploading sample document...")
    
    sample_text = """
    Multimodal AI Assistant l√† m·ªôt h·ªá th·ªëng AI ti√™n ti·∫øn c√≥ kh·∫£ nƒÉng x·ª≠ l√Ω nhi·ªÅu lo·∫°i d·ªØ li·ªáu kh√°c nhau.
    H·ªá th·ªëng n√†y c√≥ th·ªÉ:
    1. X·ª≠ l√Ω vƒÉn b·∫£n: t√≥m t·∫Øt, tr·∫£ l·ªùi c√¢u h·ªèi
    2. X·ª≠ l√Ω h√¨nh ·∫£nh: OCR, VQA  
    3. X·ª≠ l√Ω √¢m thanh: ASR, TTS, VAD
    4. T√≠ch h·ª£p RAG ƒë·ªÉ t√¨m ki·∫øm th√¥ng tin
    
    C√¥ng ngh·ªá s·ª≠ d·ª•ng bao g·ªìm PyTorch, Transformers, FastAPI v√† Docker.
    """
    
    temp_text_file = tempfile.mktemp(suffix='.txt')
    with open(temp_text_file, 'w', encoding='utf-8') as f:
        f.write(sample_text)
    
    try:
        async with aiohttp.ClientSession() as session:
            # Upload document
            data = aiohttp.FormData()
            data.add_field('files', open(temp_text_file, 'rb'), filename='demo.txt')
            
            async with session.post(f"{BASE_URL}/v1/rag/upload", data=data) as response:
                result = await response.json()
                print(f"Upload Result: {json.dumps(result, indent=2)}")
                
                if result.get('ok'):
                    print_success(f"Uploaded th√†nh c√¥ng! Chunks added: {result.get('chunks_added', 0)}")
                else:
                    print_error("Upload th·∫•t b·∫°i")
                    return
            
            # Query RAG
            print_info("\nQuerying RAG...")
            data = aiohttp.FormData()
            data.add_field('question', 'H·ªá th·ªëng c√≥ nh·ªØng kh·∫£ nƒÉng g√¨?')
            data.add_field('top_k', '3')
            
            async with session.post(f"{BASE_URL}/v1/rag/query", data=data) as response:
                result = await response.json()
                print(f"Query Result: {json.dumps(result, indent=2)}")
                
                if result.get('ok'):
                    answer = result.get('result', {}).get('answer', {})
                    print_success(f"RAG Answer: '{answer.get('answer', '')}'")
                else:
                    print_error("Query th·∫•t b·∫°i")
                    
    finally:
        # Cleanup
        if os.path.exists(temp_text_file):
            os.remove(temp_text_file)

async def demo_audio():
    """Demo audio processing"""
    print_header("üéµ AUDIO PROCESSING DEMO")
    
    # Create sample audio
    print_info("T·∫°o file audio m·∫´u...")
    audio_path = create_sample_audio()
    
    try:
        async with aiohttp.ClientSession() as session:
            # Test TTS first
            print_info("Testing Text-to-Speech...")
            data = aiohttp.FormData()
            data.add_field('text', 'Hello from multimodal AI assistant!')
            
            async with session.post(f"{BASE_URL}/v1/audio/tts", data=data) as response:
                if response.status == 200:
                    audio_data = await response.read()
                    tts_path = tempfile.mktemp(suffix='.wav')
                    with open(tts_path, 'wb') as f:
                        f.write(audio_data)
                    print_success(f"TTS th√†nh c√¥ng! Audio saved to: {tts_path}")
                else:
                    print_warning("TTS kh√¥ng th√†nh c√¥ng")
            
            # Test VAD
            print_info("\nTesting Voice Activity Detection...")
            data = aiohttp.FormData()
            data.add_field('audio', open(audio_path, 'rb'), filename='demo.wav')
            
            async with session.post(f"{BASE_URL}/v1/audio/vad", data=data) as response:
                result = await response.json()
                print(f"VAD Result: {json.dumps(result, indent=2)}")
                
                if result.get('ok'):
                    segments = result.get('segments', [])
                    print_success(f"VAD detected {len(segments)} speech segments")
                else:
                    print_warning("VAD kh√¥ng th√†nh c√¥ng")
            
            # Test ASR
            print_info("\nTesting Automatic Speech Recognition...")
            data = aiohttp.FormData()
            data.add_field('audio', open(audio_path, 'rb'), filename='demo.wav')
            
            async with session.post(f"{BASE_URL}/v1/audio/asr", data=data) as response:
                result = await response.json()
                print(f"ASR Result: {json.dumps(result, indent=2)}")
                
                if result.get('ok'):
                    text = result.get('text', '')
                    print_success(f"ASR transcription: '{text}'")
                else:
                    print_warning("ASR kh√¥ng th√†nh c√¥ng")
                    
    finally:
        # Cleanup
        if os.path.exists(audio_path):
            os.remove(audio_path)

async def demo_xai():
    """Demo Explainable AI"""
    print_header("üîç EXPLAINABLE AI (XAI) DEMO")
    
    # Create sample image
    print_info("T·∫°o ·∫£nh m·∫´u cho Grad-CAM...")
    image_path = create_sample_image()
    
    try:
        async with aiohttp.ClientSession() as session:
            data = aiohttp.FormData()
            data.add_field('image', open(image_path, 'rb'), filename='demo.png')
            
            async with session.post(f"{BASE_URL}/v1/xai/gradcam", data=data) as response:
                if response.status == 200:
                    gradcam_data = await response.read()
                    gradcam_path = tempfile.mktemp(suffix='.png')
                    with open(gradcam_path, 'wb') as f:
                        f.write(gradcam_data)
                    print_success(f"Grad-CAM th√†nh c√¥ng! Saved to: {gradcam_path}")
                    print_info(f"B·∫°n c√≥ th·ªÉ m·ªü file ƒë·ªÉ xem: {gradcam_path}")
                else:
                    result = await response.json()
                    print_error(f"Grad-CAM th·∫•t b·∫°i: {result}")
                    
    finally:
        # Cleanup
        if os.path.exists(image_path):
            os.remove(image_path)

async def run_full_demo():
    """Ch·∫°y full demo t·∫•t c·∫£ t√≠nh nƒÉng"""
    print_header("üöÄ MULTIMODAL AI ASSISTANT - FULL DEMO")
    
    # Check server first
    if not await check_server():
        return
    
    try:
        await demo_health_check()
        await demo_multimodal_analysis()
        await demo_rag()
        await demo_audio()
        await demo_xai()
        
        print_header("üéâ DEMO HO√ÄN TH√ÄNH")
        print_success("T·∫•t c·∫£ t√≠nh nƒÉng ƒë√£ ƒë∆∞·ª£c test th√†nh c√¥ng!")
        print_info("H√£y explore API th√™m t·∫°i: http://localhost:8000/docs")
        
    except KeyboardInterrupt:
        print_warning("\nDemo b·ªã interrupt b·ªüi user")
    except Exception as e:
        print_error(f"L·ªói trong qu√° tr√¨nh demo: {e}")

async def interactive_menu():
    """Menu interactive cho user l·ª±a ch·ªçn"""
    while True:
        print_header("üéÆ INTERACTIVE DEMO MENU")
        print("1. üè• Health Check")
        print("2. ü§ñ Multimodal Analysis (OCR, Summarization)")
        print("3. üìö RAG Demo")
        print("4. üéµ Audio Processing")
        print("5. üîç Explainable AI (Grad-CAM)")
        print("6. üöÄ Run Full Demo")
        print("7. ‚ùå Exit")
        
        choice = input(f"\n{Colors.CYAN}Ch·ªçn option (1-7): {Colors.END}").strip()
        
        if choice == '1':
            await demo_health_check()
        elif choice == '2':
            await demo_multimodal_analysis()
        elif choice == '3':
            await demo_rag()
        elif choice == '4':
            await demo_audio()
        elif choice == '5':
            await demo_xai()
        elif choice == '6':
            await run_full_demo()
        elif choice == '7':
            print_success("Goodbye! üëã")
            break
        else:
            print_warning("Invalid choice. Please select 1-7.")
        
        input(f"\n{Colors.YELLOW}Press Enter to continue...{Colors.END}")

async def main():
    """Main function"""
    if len(sys.argv) > 1 and sys.argv[1] == '--full':
        await run_full_demo()
    else:
        await interactive_menu()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print_warning("\nDemo interrupted. Goodbye! üëã")
    except Exception as e:
        print_error(f"Unexpected error: {e}")
